import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Envoie un code OTP au num√©ro fourni
  Future<void> verifyPhoneNumber({
    required String phoneNumber,
    required Function(String verificationId) onCodeSent,
    required Function(PhoneAuthCredential credential) onVerificationCompleted,
    required Function(FirebaseAuthException e) onVerificationFailed,
  }) async {
    print('üìû [verifyPhoneNumber] D√©but de la v√©rification du num√©ro $phoneNumber');
    try {
      await _auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        timeout: const Duration(seconds: 120),
        verificationCompleted: (PhoneAuthCredential credential) {
          print('‚úÖ [verifyPhoneNumber] V√©rification automatique r√©ussie');
          onVerificationCompleted(credential);
        },
        verificationFailed: (FirebaseAuthException e) {
          print('‚ùå [verifyPhoneNumber] √âchec de la v√©rification');
          print('‚Ü™Ô∏è Code : ${e.code}');
          print('‚Ü™Ô∏è Message : ${e.message}');
          onVerificationFailed(e);
        },
        codeSent: (String verificationId, int? resendToken) {
          print('üì® [verifyPhoneNumber] Code envoy√©');
          print('‚Ü™Ô∏è verificationId : $verificationId');
          onCodeSent(verificationId);
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          print('‚è∞ [verifyPhoneNumber] D√©lai de r√©cup√©ration automatique d√©pass√©');
          print('‚Ü™Ô∏è verificationId : $verificationId');
        },
        forceResendingToken: null,
        multiFactorSession: null,
      );
    } catch (e) {
      print('‚ùå [verifyPhoneNumber] Erreur inattendue lors de la v√©rification: $e');
      rethrow;
    }
  }

  /// V√©rifie l'OTP saisi manuellement
  Future<void> signInWithOTP(String verificationId, String smsCode) async {
    print('üîê AuthService: Tentative de connexion avec OTP');
    try {
      final credential = PhoneAuthProvider.credential(
        verificationId: verificationId,
        smsCode: smsCode,
      );
      await _auth.signInWithCredential(credential);
      print('‚úÖ AuthService: Connexion r√©ussie avec OTP');
    } catch (e) {
      print('‚ùå AuthService: Erreur lors de la connexion avec OTP: $e');
      rethrow;
    }
  }

  /// Connexion auto avec credential (Android only)
  Future<void> signInWithCredential(PhoneAuthCredential credential) async {
    print('üîë AuthService: Tentative de connexion avec credential');
    try {
      await _auth.signInWithCredential(credential);
      print('‚úÖ AuthService: Connexion r√©ussie avec credential');
    } catch (e) {
      print('‚ùå AuthService: Erreur lors de la connexion avec credential: $e');
      rethrow;
    }
  }

  /// Connexion anonyme
  Future<void> signInAnonymously() async {
    print('üë§ AuthService: Tentative de connexion anonyme');
    try {
      await _auth.signInAnonymously();
      print('‚úÖ AuthService: Connexion anonyme r√©ussie');
    } catch (e) {
      print('‚ùå AuthService: Erreur lors de la connexion anonyme: $e');
      rethrow;
    }
  }

  /// D√©connexion
  Future<void> signOut() async {
    print('üö™ AuthService: Tentative de d√©connexion');
    try {
      await _auth.signOut();
      print('‚úÖ AuthService: D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå AuthService: Erreur lors de la d√©connexion: $e');
      rethrow;
    }
  }

  /// R√©cup√©rer l'utilisateur actuel
  User? get currentUser => _auth.currentUser;

  /// √âcouter les changements d'√©tat de connexion
  Stream<User?> authStateChanges() => _auth.authStateChanges();
}
